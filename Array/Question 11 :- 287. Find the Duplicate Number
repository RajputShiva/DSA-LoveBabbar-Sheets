


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
public int findDuplicate(int[] nums) {
      // BrutForce = O(n^2)  
        int ans=-1;
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if(nums[i]==nums[j]){
                  ans =nums[i];
                  return ans;
                }
            }
        }
       return ans;
 // Linear time = O(n)
      Arrays.sort(nums);
        int ans = 0;
        for (int i = 0; i < nums.length-1; i++) {
            if (nums[i] == nums[i+1]) {
                ans = nums[i];
                break;
            }
        }
        return ans;

    // Binary Search = O(nlogn)
        
         // 'low' and 'high' represent the range of values of the target        
        int low = 1, high = nums.length - 1;
        int duplicate = -1;
        
        while (low <= high) {
            int cur = (low + high) / 2;

            // Count how many numbers in 'nums' are less than or equal to 'cur'
            int count = 0;
            for (int num : nums) {
                if (num <= cur)
                    count++;
            }
            
            if (count > cur) {
                duplicate = cur;
                high = cur - 1;
            } else {
                low = cur + 1;
            }
        }
        return duplicate;

    }
