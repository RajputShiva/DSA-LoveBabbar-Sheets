Approach :-
1) Use two index variables i and j, initial values i = 0, j = 0 
2) If arr1[i] is smaller than arr2[j] then print arr1[i] and increment i. 
3) If arr1[i] is greater than arr2[j] then print arr2[j] and increment j. 
4) If both are same then print any of them and increment both i and j. 
5) Print remaining elements of the larger array.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Example :-
Input: arr1[] = {1, 3, 4, 5, 7}
        arr2[] = {2, 3, 5, 6} 
Output: Union : {1, 2, 3, 4, 5, 6, 7} 
         Intersection : {3, 5}

Input: arr1[] = {2, 5, 6}
        arr2[] = {4, 6, 8, 10} 
Output: Union : {2, 4, 5, 6, 8, 10} 
         Intersection : {6}
         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 public static void main(String[] args) {
        int []a={1,2,3,4,5,7};
        int []b={2,3,5,6};
        int n=a.length;
        int m=b.length;
        //System.out.println("Union:");
       // pUnion(a,b,n,m);
        System.out.println("Intersection");
        pIntersection(a,b,n,m);
   }
   // public static void pUnion(int a[],int b[],int n,int m){
   //  int i=0 ,j=0;
   //  while(i<n && j<m){
   //    if(a[i]<b[j])
   //    System.out.print(a[i++]+" ");
   //    else if(b[j]<a[i])
   //    System.out.print(b[j++]+" ");
   //    else{
   //       System.out.print(b[j++]+" ");
   //         i++;
   //    }
   //  }
   //  while(i<n)
   //     System.out.print(a[i++]+" ");

   // while(j<m)
   //    System.out.print(b[j++]+" ");
   // }

   public static void pIntersection(int a[],int b[],int n,int m){
      int i=0 ,j=0;
      while(i<n && j<m){
        if(a[i]<b[j])
        //System.out.print(a[i++]+" ");
             i++;
        else if(b[j]<a[i])
        //System.out.print(b[j++]+" ");
             j++;
        else{
           System.out.print(b[j++]+" ");
             i++;
          }
     }
  }
